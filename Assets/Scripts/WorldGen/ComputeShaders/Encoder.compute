#pragma kernel NoiseGenerator
#pragma kernel HeightGenerator
#include "noiseSimplex.cginc"

// first iteration output
RWTexture2D<float4> ContinentMap;
RWTexture2D<float4> Altitude;
RWTexture2D<float4> Proximity;
RWTexture2D<float4> Elevation;

// second iteration output
RWTexture2D<float4> Temperature;
RWTexture2D<float4> Humidity;
RWTexture2D<float4> HeightMap;
RWStructuredBuffer<float> BiomeCurves;

// texture and base noise settings
int randSeed1;
int randSeed2;
int randSeed3;
int randSeed4;
int width;
int height;
int octaves;
int scale;
float gain;
float lacunarity;

// generator settings
int altitudeScale;
int altitudeAmplitude;

int CurveRes;
float AtoTWeight;
float AtoHWeight;

// biome boundaries here
float t1;
float t2;
float t3;
float t4;
float t5;
float t6;
float h8;
float h9;
float h10;
float h11;
float h12;
float h13;

float remap(float v, float minOld, float maxOld, float minNew, float maxNew) {
    return saturate(minNew + (v-minOld) * (maxNew - minNew) / (maxOld-minOld));
}

float3 latLongToPoint(float latitude, float longitude) {

    float y = sin(latitude);
    float r = cos(latitude); // radius of 2d circle cut through sphere at 'y'
    float x = sin(longitude) * r; 
    float z = -cos(longitude) * r;

    return float3(x, y, z);
}

float2 CalculateUV(float3 pos)
{
    float latitude = asin(pos.y);
    float longitude = atan2(pos.x, -pos.z);
    return float2((longitude + 3.14159265) / (2. * 3.14159265), (latitude + 3.14159265 / 2.) / 3.14159265);
}

float fbm(float3 x)
{
    float value = 0.0;
    float amplitude = 1;
    float frequency = 1;
    
    for (int i = 0; i < octaves; i++) {
        
        value += amplitude * snoise(frequency * x);
        x *= 2.;
        amplitude *= gain;
        frequency *= lacunarity;
    }
    return value;
}

[numthreads(16,16,1)]
void NoiseGenerator (uint3 id : sv_dispatchthreadid)
{
    // this generate main height
    static const float p = 3.14159265f;
    float _x = remap(id.x, 0, width - 1, 0, (width - 1) / (float) width);
    float _y = remap(id.y, 0, height - 1, 0, (width - 1) / (float) width);

    // forgot why i would multiply this by 2048 but whatever
    float3 v = latLongToPoint((_y * p) - p / 2.0, (_x * p * 2.0) - p) * 2048;
    
    float3 large = float3(v.x + randSeed1, v.y + randSeed1, v.z + randSeed1);
    float3 medium = float3(v.x + randSeed2, v.y + randSeed2, v.z + randSeed2);
    
    float h0 = (fbm(large / scale) + 1) / 2;
    float h1 = (fbm(medium / (scale / 3)) + 1) / 2;
    
    float clampH0 = step(0.55, h0);
    float clampH1 = step(0.7, h1); 
    
    float f0 = 0;

    float case1 = remap(h0, 0.55, 1, 0, 1);
    float case2 = remap(h1, 0.7, 1, 0, 0.6);
    float case0 = max(case1, case2);
    
    if (clampH0 > 0.99 && clampH1 > 0.99) { f0 = case0; }
    else if (clampH0 > 0.99) { f0 = case1; }
    else if (clampH1 > 0.99) { f0 = case2; }

    float f1 = step(1, clampH0 + clampH1);

    // altitude
    float3 n3 = float3(v.x + randSeed3, v.y + randSeed3, v.z + randSeed3);

    int d = id.y + fbm(n3 / altitudeScale) * altitudeAmplitude;
    float mid = (float) height / 2.;
    if (d < 0) { d += height; } else if (d > height) { d -= height; }
    float f2 = 1 - abs(d - mid) / mid;
    
    float4 d0 = float4(f0, f0, f0, 1);
    Proximity[id.xy] = d0;
    float4 d1 = float4(f1, f1, f1, 1);
    ContinentMap[id.xy] = d1;
    float4 d2 = float4(f2, f2, f2, 1);
    Altitude[id.xy] = d2;

    // computing elevation
    float3 elevationV = float3(v.x + randSeed4, v.y + randSeed4, v.z + randSeed4);
    float f3 = (fbm(elevationV / scale * 3) + 1) / 2;
    float4 d3 = float4(f3, f3, f3, 1);
    Elevation[id.xy] = d3;

    // computing temperature
    const float aToTCompliment = 1 - AtoTWeight;
    
    float proximity = Proximity[id.xy].r;
    float altitude = Altitude[id.xy].r;
    float elevation = Elevation[id.xy].r;

    // higher altitude means lower temperature
    // higher elevation means lower temperature
    // farther from sea means temperature gets multiplied 

    // altitude approach middle and proximity approach low means higher temperature
    float temperatureRaw = altitude * AtoTWeight + (1 - elevation) * aToTCompliment;

    // skew temperature toward 0 or 1 if they are away from 0.5 in case proximity is high
    // 0.7 is a fairly balanced constant
    float t =
        min(1, (1 - (0.5 - temperatureRaw)) * temperatureRaw * proximity + (1 - proximity) * temperatureRaw);
    Temperature[id.xy] = float4(t, t, t, 1);

    // altitude approach middle and proximity approach low means higher humidity
    float h =
        min(1, altitude * 0.4 + (1 - proximity) * 0.3 + (1 - elevation) * 0.3);
    Humidity[id.xy] = float4(h, h, h, 1);
}

[numthreads(16,16,1)]
void HeightGenerator(uint3 id : sv_dispatchthreadid)
{
    static const float p = 3.14159265f;
    float _x = remap(id.x, 0, width - 1, 0, (width - 1) / (float) width);
    float _y = remap(id.y, 0, height - 1, 0, (width - 1) / (float) width);
    float3 v = latLongToPoint((_y * p) - p / 2.0, (_x * p * 2.0) - p) * 2048;
    float3 scaled = float3(v.x + randSeed3, v.y + randSeed3, v.z + randSeed3);
    float a = (fbm(scaled / scale * 6) + 1) / 2;

    int sample = (int) (a * ((float) CurveRes - 1));
    
    float encode; 
    float t = Temperature[id.xy].r;
    float h = Humidity[id.xy].r;
    
    if (t < t1 && h < h13) encode = BiomeCurves[sample];
    else if (t < t2 && h < h12) encode = BiomeCurves[sample + CurveRes];
    else if (t < t3 && h8 <= h && h < h11) encode = BiomeCurves[sample + CurveRes * 2];
    else if (t < t4 && h < h8) encode = BiomeCurves[sample + CurveRes * 3];
    else if (h < h8) encode = BiomeCurves[sample + CurveRes * 4];
    else if (t < t5 && h8 <= h && h < h9) encode = BiomeCurves[sample + CurveRes * 5];
    else if (h8 <= h && h < h9) encode = BiomeCurves[sample + CurveRes * 6];
    else if (h < h10) encode = BiomeCurves[sample + CurveRes * 7];
    else if (t < t6) encode = BiomeCurves[sample + CurveRes * 8];
    else encode = BiomeCurves[sample + CurveRes * 9];;

    encode = encode * remap(Proximity[id.xy], 0, 1, 0.5, 1) * ContinentMap[id.xy];
    HeightMap[id.xy] = float4(encode, 1, 1, 1); 
}

    

